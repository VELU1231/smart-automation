version: '3.8'

services:
  n8n:
    image: n8nio/n8n:latest
    container_name: smart-automation-n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=false
      - N8N_HOST=localhost
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://localhost:5678/
      - GENERIC_TIMEZONE=UTC
      - N8N_LOG_LEVEL=info
      - N8N_METRICS=true
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_VERSION_NOTIFICATIONS_ENABLED=false
      - N8N_TEMPLATES_ENABLED=true
      - N8N_ONBOARDING_FLOW_DISABLED=true
      - N8N_HIRING_BANNER_ENABLED=false
      - DB_TYPE=sqlite
      - DB_SQLITE_DATABASE=/home/node/.n8n/database.sqlite
      - N8N_ENCRYPTION_KEY=smart-automation-2024
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n/workflows:/home/node/.n8n/workflows
      - ./n8n/credentials:/home/node/.n8n/credentials
    networks:
      - smart-automation
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Redis for better performance with multiple workflows
  redis:
    image: redis:7-alpine
    container_name: smart-automation-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - smart-automation
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: PostgreSQL for production use
  postgres:
    image: postgres:15-alpine
    container_name: smart-automation-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=n8n
      - POSTGRES_USER=n8n
      - POSTGRES_PASSWORD=n8n_password_2024
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - smart-automation
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U n8n -d n8n"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - production

  # Optional: Mailhog for testing email workflows locally
  mailhog:
    image: mailhog/mailhog:latest
    container_name: smart-automation-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - smart-automation
    profiles:
      - development

volumes:
  n8n_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local

networks:
  smart-automation:
    driver: bridge